// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package fn

func ReduceInt(elements []int, fn func(accm int, curr int) int) int {
	var accm int
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceInt8(elements []int8, fn func(accm int8, curr int8) int8) int8 {
	var accm int8
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceInt16(elements []int16, fn func(accm int16, curr int16) int16) int16 {
	var accm int16
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceInt32(elements []int32, fn func(accm int32, curr int32) int32) int32 {
	var accm int32
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceInt64(elements []int64, fn func(accm int64, curr int64) int64) int64 {
	var accm int64
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUint(elements []uint, fn func(accm uint, curr uint) uint) uint {
	var accm uint
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUint8(elements []uint8, fn func(accm uint8, curr uint8) uint8) uint8 {
	var accm uint8
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUint16(elements []uint16, fn func(accm uint16, curr uint16) uint16) uint16 {
	var accm uint16
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUint32(elements []uint32, fn func(accm uint32, curr uint32) uint32) uint32 {
	var accm uint32
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUint64(elements []uint64, fn func(accm uint64, curr uint64) uint64) uint64 {
	var accm uint64
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceUintptr(elements []uintptr, fn func(accm uintptr, curr uintptr) uintptr) uintptr {
	var accm uintptr
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceString(elements []string, fn func(accm string, curr string) string) string {
	var accm string
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceFloat32(elements []float32, fn func(accm float32, curr float32) float32) float32 {
	var accm float32
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceFloat64(elements []float64, fn func(accm float64, curr float64) float64) float64 {
	var accm float64
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}

func ReduceBool(elements []bool, fn func(accm bool, curr bool) bool) bool {
	var accm bool
	for _, elem := range elements {
		accm = fn(accm, elem)
	}
	return accm
}
