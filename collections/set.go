// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package set

type IntSet struct {
	m map[int]struct{}
}

func NewIntSet(elements ...int) *IntSet {
	set := IntSet{
		m: make(map[int]struct{}),
	}
	set.Add(elements...)
	return &set
}

func (s *IntSet) Add(elements ...int) {
	for _, element := range elements {
		s.m[element] = struct{}{}
	}
}

func (s *IntSet) Contain(element int) bool {
	_, exists := s.m[element]
	return exists
}

func (s *IntSet) Elements() []int {
	elements := make([]int, 0, len(s.m))
	for element := range s.m {
		elements = append(elements, element)
	}

	return elements
}

type Int64Set struct {
	m map[int64]struct{}
}

func NewInt64Set(elements ...int64) *Int64Set {
	set := Int64Set{
		m: make(map[int64]struct{}),
	}
	set.Add(elements...)
	return &set
}

func (s *Int64Set) Add(elements ...int64) {
	for _, element := range elements {
		s.m[element] = struct{}{}
	}
}

func (s *Int64Set) Contain(element int64) bool {
	_, exists := s.m[element]
	return exists
}

func (s *Int64Set) Elements() []int64 {
	elements := make([]int64, 0, len(s.m))
	for element := range s.m {
		elements = append(elements, element)
	}

	return elements
}

type StringSet struct {
	m map[string]struct{}
}

func NewStringSet(elements ...string) *StringSet {
	set := StringSet{
		m: make(map[string]struct{}),
	}
	set.Add(elements...)
	return &set
}

func (s *StringSet) Add(elements ...string) {
	for _, element := range elements {
		s.m[element] = struct{}{}
	}
}

func (s *StringSet) Contain(element string) bool {
	_, exists := s.m[element]
	return exists
}

func (s *StringSet) Elements() []string {
	elements := make([]string, 0, len(s.m))
	for element := range s.m {
		elements = append(elements, element)
	}

	return elements
}
