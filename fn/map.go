// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package fn

func MapIntToInt(elements []int, fn func(int) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToInt8(elements []int, fn func(int) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToInt16(elements []int, fn func(int) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToInt32(elements []int, fn func(int) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToInt64(elements []int, fn func(int) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUint(elements []int, fn func(int) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUint8(elements []int, fn func(int) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUint16(elements []int, fn func(int) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUint32(elements []int, fn func(int) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUint64(elements []int, fn func(int) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToUintptr(elements []int, fn func(int) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToString(elements []int, fn func(int) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToFloat32(elements []int, fn func(int) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToFloat64(elements []int, fn func(int) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapIntToBool(elements []int, fn func(int) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToInt(elements []int8, fn func(int8) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToInt8(elements []int8, fn func(int8) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToInt16(elements []int8, fn func(int8) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToInt32(elements []int8, fn func(int8) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToInt64(elements []int8, fn func(int8) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUint(elements []int8, fn func(int8) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUint8(elements []int8, fn func(int8) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUint16(elements []int8, fn func(int8) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUint32(elements []int8, fn func(int8) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUint64(elements []int8, fn func(int8) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToUintptr(elements []int8, fn func(int8) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToString(elements []int8, fn func(int8) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToFloat32(elements []int8, fn func(int8) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToFloat64(elements []int8, fn func(int8) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt8ToBool(elements []int8, fn func(int8) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToInt(elements []int16, fn func(int16) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToInt8(elements []int16, fn func(int16) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToInt16(elements []int16, fn func(int16) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToInt32(elements []int16, fn func(int16) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToInt64(elements []int16, fn func(int16) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUint(elements []int16, fn func(int16) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUint8(elements []int16, fn func(int16) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUint16(elements []int16, fn func(int16) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUint32(elements []int16, fn func(int16) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUint64(elements []int16, fn func(int16) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToUintptr(elements []int16, fn func(int16) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToString(elements []int16, fn func(int16) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToFloat32(elements []int16, fn func(int16) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToFloat64(elements []int16, fn func(int16) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt16ToBool(elements []int16, fn func(int16) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToInt(elements []int32, fn func(int32) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToInt8(elements []int32, fn func(int32) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToInt16(elements []int32, fn func(int32) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToInt32(elements []int32, fn func(int32) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToInt64(elements []int32, fn func(int32) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUint(elements []int32, fn func(int32) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUint8(elements []int32, fn func(int32) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUint16(elements []int32, fn func(int32) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUint32(elements []int32, fn func(int32) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUint64(elements []int32, fn func(int32) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToUintptr(elements []int32, fn func(int32) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToString(elements []int32, fn func(int32) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToFloat32(elements []int32, fn func(int32) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToFloat64(elements []int32, fn func(int32) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt32ToBool(elements []int32, fn func(int32) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToInt(elements []int64, fn func(int64) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToInt8(elements []int64, fn func(int64) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToInt16(elements []int64, fn func(int64) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToInt32(elements []int64, fn func(int64) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToInt64(elements []int64, fn func(int64) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUint(elements []int64, fn func(int64) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUint8(elements []int64, fn func(int64) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUint16(elements []int64, fn func(int64) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUint32(elements []int64, fn func(int64) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUint64(elements []int64, fn func(int64) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToUintptr(elements []int64, fn func(int64) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToString(elements []int64, fn func(int64) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToFloat32(elements []int64, fn func(int64) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToFloat64(elements []int64, fn func(int64) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapInt64ToBool(elements []int64, fn func(int64) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToInt(elements []uint, fn func(uint) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToInt8(elements []uint, fn func(uint) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToInt16(elements []uint, fn func(uint) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToInt32(elements []uint, fn func(uint) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToInt64(elements []uint, fn func(uint) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUint(elements []uint, fn func(uint) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUint8(elements []uint, fn func(uint) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUint16(elements []uint, fn func(uint) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUint32(elements []uint, fn func(uint) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUint64(elements []uint, fn func(uint) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToUintptr(elements []uint, fn func(uint) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToString(elements []uint, fn func(uint) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToFloat32(elements []uint, fn func(uint) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToFloat64(elements []uint, fn func(uint) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintToBool(elements []uint, fn func(uint) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToInt(elements []uint8, fn func(uint8) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToInt8(elements []uint8, fn func(uint8) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToInt16(elements []uint8, fn func(uint8) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToInt32(elements []uint8, fn func(uint8) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToInt64(elements []uint8, fn func(uint8) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUint(elements []uint8, fn func(uint8) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUint8(elements []uint8, fn func(uint8) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUint16(elements []uint8, fn func(uint8) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUint32(elements []uint8, fn func(uint8) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUint64(elements []uint8, fn func(uint8) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToUintptr(elements []uint8, fn func(uint8) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToString(elements []uint8, fn func(uint8) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToFloat32(elements []uint8, fn func(uint8) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToFloat64(elements []uint8, fn func(uint8) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint8ToBool(elements []uint8, fn func(uint8) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToInt(elements []uint16, fn func(uint16) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToInt8(elements []uint16, fn func(uint16) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToInt16(elements []uint16, fn func(uint16) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToInt32(elements []uint16, fn func(uint16) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToInt64(elements []uint16, fn func(uint16) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUint(elements []uint16, fn func(uint16) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUint8(elements []uint16, fn func(uint16) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUint16(elements []uint16, fn func(uint16) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUint32(elements []uint16, fn func(uint16) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUint64(elements []uint16, fn func(uint16) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToUintptr(elements []uint16, fn func(uint16) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToString(elements []uint16, fn func(uint16) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToFloat32(elements []uint16, fn func(uint16) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToFloat64(elements []uint16, fn func(uint16) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint16ToBool(elements []uint16, fn func(uint16) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToInt(elements []uint32, fn func(uint32) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToInt8(elements []uint32, fn func(uint32) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToInt16(elements []uint32, fn func(uint32) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToInt32(elements []uint32, fn func(uint32) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToInt64(elements []uint32, fn func(uint32) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUint(elements []uint32, fn func(uint32) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUint8(elements []uint32, fn func(uint32) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUint16(elements []uint32, fn func(uint32) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUint32(elements []uint32, fn func(uint32) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUint64(elements []uint32, fn func(uint32) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToUintptr(elements []uint32, fn func(uint32) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToString(elements []uint32, fn func(uint32) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToFloat32(elements []uint32, fn func(uint32) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToFloat64(elements []uint32, fn func(uint32) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint32ToBool(elements []uint32, fn func(uint32) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToInt(elements []uint64, fn func(uint64) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToInt8(elements []uint64, fn func(uint64) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToInt16(elements []uint64, fn func(uint64) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToInt32(elements []uint64, fn func(uint64) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToInt64(elements []uint64, fn func(uint64) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUint(elements []uint64, fn func(uint64) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUint8(elements []uint64, fn func(uint64) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUint16(elements []uint64, fn func(uint64) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUint32(elements []uint64, fn func(uint64) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUint64(elements []uint64, fn func(uint64) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToUintptr(elements []uint64, fn func(uint64) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToString(elements []uint64, fn func(uint64) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToFloat32(elements []uint64, fn func(uint64) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToFloat64(elements []uint64, fn func(uint64) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUint64ToBool(elements []uint64, fn func(uint64) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToInt(elements []uintptr, fn func(uintptr) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToInt8(elements []uintptr, fn func(uintptr) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToInt16(elements []uintptr, fn func(uintptr) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToInt32(elements []uintptr, fn func(uintptr) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToInt64(elements []uintptr, fn func(uintptr) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUint(elements []uintptr, fn func(uintptr) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUint8(elements []uintptr, fn func(uintptr) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUint16(elements []uintptr, fn func(uintptr) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUint32(elements []uintptr, fn func(uintptr) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUint64(elements []uintptr, fn func(uintptr) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToUintptr(elements []uintptr, fn func(uintptr) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToString(elements []uintptr, fn func(uintptr) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToFloat32(elements []uintptr, fn func(uintptr) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToFloat64(elements []uintptr, fn func(uintptr) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapUintptrToBool(elements []uintptr, fn func(uintptr) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToInt(elements []string, fn func(string) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToInt8(elements []string, fn func(string) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToInt16(elements []string, fn func(string) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToInt32(elements []string, fn func(string) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToInt64(elements []string, fn func(string) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUint(elements []string, fn func(string) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUint8(elements []string, fn func(string) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUint16(elements []string, fn func(string) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUint32(elements []string, fn func(string) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUint64(elements []string, fn func(string) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToUintptr(elements []string, fn func(string) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToString(elements []string, fn func(string) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToFloat32(elements []string, fn func(string) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToFloat64(elements []string, fn func(string) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapStringToBool(elements []string, fn func(string) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToInt(elements []float32, fn func(float32) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToInt8(elements []float32, fn func(float32) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToInt16(elements []float32, fn func(float32) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToInt32(elements []float32, fn func(float32) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToInt64(elements []float32, fn func(float32) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUint(elements []float32, fn func(float32) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUint8(elements []float32, fn func(float32) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUint16(elements []float32, fn func(float32) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUint32(elements []float32, fn func(float32) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUint64(elements []float32, fn func(float32) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToUintptr(elements []float32, fn func(float32) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToString(elements []float32, fn func(float32) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToFloat32(elements []float32, fn func(float32) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToFloat64(elements []float32, fn func(float32) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat32ToBool(elements []float32, fn func(float32) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToInt(elements []float64, fn func(float64) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToInt8(elements []float64, fn func(float64) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToInt16(elements []float64, fn func(float64) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToInt32(elements []float64, fn func(float64) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToInt64(elements []float64, fn func(float64) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUint(elements []float64, fn func(float64) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUint8(elements []float64, fn func(float64) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUint16(elements []float64, fn func(float64) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUint32(elements []float64, fn func(float64) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUint64(elements []float64, fn func(float64) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToUintptr(elements []float64, fn func(float64) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToString(elements []float64, fn func(float64) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToFloat32(elements []float64, fn func(float64) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToFloat64(elements []float64, fn func(float64) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapFloat64ToBool(elements []float64, fn func(float64) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToInt(elements []bool, fn func(bool) int) []int {
	out := make([]int, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToInt8(elements []bool, fn func(bool) int8) []int8 {
	out := make([]int8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToInt16(elements []bool, fn func(bool) int16) []int16 {
	out := make([]int16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToInt32(elements []bool, fn func(bool) int32) []int32 {
	out := make([]int32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToInt64(elements []bool, fn func(bool) int64) []int64 {
	out := make([]int64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUint(elements []bool, fn func(bool) uint) []uint {
	out := make([]uint, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUint8(elements []bool, fn func(bool) uint8) []uint8 {
	out := make([]uint8, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUint16(elements []bool, fn func(bool) uint16) []uint16 {
	out := make([]uint16, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUint32(elements []bool, fn func(bool) uint32) []uint32 {
	out := make([]uint32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUint64(elements []bool, fn func(bool) uint64) []uint64 {
	out := make([]uint64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToUintptr(elements []bool, fn func(bool) uintptr) []uintptr {
	out := make([]uintptr, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToString(elements []bool, fn func(bool) string) []string {
	out := make([]string, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToFloat32(elements []bool, fn func(bool) float32) []float32 {
	out := make([]float32, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToFloat64(elements []bool, fn func(bool) float64) []float64 {
	out := make([]float64, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}

func MapBoolToBool(elements []bool, fn func(bool) bool) []bool {
	out := make([]bool, 0, len(elements))
	for _, elem := range elements {
		out = append(out, fn(elem))
	}
	return out
}
